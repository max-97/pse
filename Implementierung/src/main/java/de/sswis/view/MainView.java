package de.sswis.view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import de.sswis.view.model.VMConfiguration;
import de.sswis.view.model.VMResult;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.List;


/**
 * in Hauptfenster der Benutzeroberfläche.
 *
 * @author Sophie Bräuniger
 */
public class MainView implements AbstractMainView {


    private List<VMConfiguration> configurations;


    private JButton startButton;
    private JButton showResultButton;
    private JTree ConfigurationTree;
    private JButton saveResultButton;
    private JPanel TitelPanel;
    private JPanel ContentPanel;
    private JScrollPane ConfigurationScrollPane;
    private JPanel MainPanel;
    private JLabel ChooseLabel;
    private JLabel TitleLabel;


    @Override
    public void addConfiguration(VMConfiguration configuration) {
    }

    @Override
    public void removeConfiguration(String configurationName) {
    }

    @Override
    public void addResult(String NameConfiguration, VMResult result) {
    }

    @Override
    public void setSimulationFinished(String NameConfiguration) {
    }

    @Override
    public VMConfiguration getSelected() {
        return null;
    }

    @Override
    public void addStartButtonActionlistener(ActionListener listener) {

    }

    @Override
    public void addStopActionListener(ActionListener listener) {

    }

    @Override
    public void addShowButtonActionlistener(ActionListener listener) {

    }

    @Override
    public void addSaveButtonActionlistener(ActionListener listener) {

    }

    @Override
    public void addNewGameMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addNewCombiStrategyMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addNewStrategyMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addNewInitMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addNewConfigMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addManageGameMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addManageCombiStrategyMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addManageStrategyMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addManageInitMenuActionListener(ActionListener listener) {

    }

    @Override
    public void addManageConfigMenuActionListener(ActionListener listener) {

    }

    @Override
    public void update() {
    }

    @Override
    public void show() {

    }

    @Override
    public void close() {

    }


    private void createUIComponents() {
        // TODO: place custom component creation code here


    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        MainPanel = new JPanel();
        MainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(20, 20, 20, 20), -1, -1));
        TitelPanel = new JPanel();
        TitelPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(TitelPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        TitleLabel = new JLabel();
        Font TitleLabelFont = this.$$$getFont$$$(null, -1, 22, TitleLabel.getFont());
        if (TitleLabelFont != null) TitleLabel.setFont(TitleLabelFont);
        TitleLabel.setText("SSWIS Simuliert WIederholte Spiele");
        TitelPanel.add(TitleLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        TitelPanel.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ContentPanel = new JPanel();
        ContentPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(ContentPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ConfigurationScrollPane = new JScrollPane();
        ConfigurationScrollPane.setHorizontalScrollBarPolicy(31);
        ConfigurationScrollPane.setVerticalScrollBarPolicy(22);
        ContentPanel.add(ConfigurationScrollPane, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ConfigurationTree.setEditable(true);
        ConfigurationTree.setLargeModel(true);
        ConfigurationTree.setRootVisible(true);
        ConfigurationTree.setShowsRootHandles(true);
        ConfigurationTree.putClientProperty("JTree.lineStyle", "");
        ConfigurationScrollPane.setViewportView(ConfigurationTree);
        ChooseLabel = new JLabel();
        ChooseLabel.setText("Wählen Sie eine Konfiguration");
        ContentPanel.add(ChooseLabel, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        ContentPanel.add(spacer2, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        startButton = new JButton();
        startButton.setText("Simulationen starten");
        ContentPanel.add(startButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        showResultButton = new JButton();
        showResultButton.setText("Ergebnisse anzeigen");
        ContentPanel.add(showResultButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        saveResultButton = new JButton();
        saveResultButton.setText("Ergebisse speichern");
        ContentPanel.add(saveResultButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        MainPanel.add(separator1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }
}
