@startuml

    namespace de.sswis.model {

        enum de.sswis.model.Action [[Action.html]] {
            {static} +COOPERATION
            {static} +DEFECTION
        }

        class de.sswis.model.Agent [[Agent.html]] {
            +Agent(int, int, Group, Strategy)
        }

        class de.sswis.model.CombinedStrategy [[CombinedStrategy.html]] {
            +CombinedStrategy(String, String, BaseStrategy[], Condition[])
            +calculateAction(Agent, Agent): Action
        }

        class de.sswis.model.Configuration [[Configuration.html]] {
            +Configuration(Game, AdaptationAlgorithm, PairingAlgorithm, RankingAlgorithm, int, int, int, double, List<Strategy>)
            +getRounds(): int
            +getCycles(): int
            +getCycleRoundCount(): int
            +getAdaptationProbability(): double
            +simulate(int): Simulation
            +addStrategy(Strategy): void
        }

        class de.sswis.model.Game [[Game.html]] {
            +Game(String, String, Tuple[])
            +getPayoffs(Action, Action): Tuple
        }

        class de.sswis.model.Game.Tuple [[Game.Tuple.html]] {
            +x: int
            +y: int
            +Tuple(int, int)
        }

        class de.sswis.model.Group [[Group.html]] {
            +Group(int, String)
            +addMember(Agent): void
        }

        class de.sswis.model.History [[History.html]] {
            +History(int)
            +cooperatedLastTime(Agent): boolean
            +cooperatedEveryTime(Agent): boolean
            +groupCooperatedLastTime(Agent): boolean
            +groupCooperatedEveryTime(Agent): boolean
        }

        class de.sswis.model.Initialization [[Initialization.html]] {
            +Initialization(Group[], int, Agent[])
            +getAgentCount(): int
        }

        interface de.sswis.model.ObservableSimulation [[ObservableSimulation.html]] {
            {abstract} +addObserver(SimulationObserver): void
            {abstract} +notifyObservers(): void
            {abstract} +deleteObserver(SimulationObserver): void
        }

        class de.sswis.model.Pair [[Pair.html]] {
            +Pair(Agent, Agent)
            +playGame(): void
        }

        class de.sswis.model.Simulation [[Simulation.html]] {
            +Simulation(Configuration)
            +simulate(): void
            +getCurrentRanking(): HashMap<Agent, Integer>
            +EquilibriumAchieved(): boolean
            +restart(): void
            +abort(): void
            +run(): void
            +addObserver(SimulationObserver): void
            +notifyObservers(): void
            +deleteObserver(SimulationObserver): void
        }

        class de.sswis.model.Strategy [[Strategy.html]] {
            +Strategy(String, String, CombinedStrategy[], double[])
            +calculateAction(Agent, Agent): Action
        }

        de.sswis.model.Configuration --> de.sswis.model.Game: game
        de.sswis.model.Configuration --> de.sswis.model.Initialization: init
        de.sswis.model.Configuration --> de.sswis.model.algorithms.adaptation.AdaptationAlgorithm: adaptationAlg
        de.sswis.model.Configuration --> de.sswis.model.algorithms.pairing.PairingAlgorithm: pairingAlg
        de.sswis.model.Configuration --> "*" de.sswis.model.Strategy: possibleStrategies
        de.sswis.model.Game +-- de.sswis.model.Game.Tuple
        de.sswis.model.Initialization --> "*" de.sswis.model.Group: groups
        de.sswis.model.Initialization --> "*" de.sswis.model.Agent: agents
        java.lang.Runnable <|.. de.sswis.model.Simulation
        de.sswis.model.ObservableSimulation <|.. de.sswis.model.Simulation
        de.sswis.model.Simulation --> "*" de.sswis.model.Pair: currentPairs
        de.sswis.model.Simulation --> "*" de.sswis.model.Agent: results
        de.sswis.model.Agent -> "1" de.sswis.model.History: history
        de.sswis.model.Agent --> "1" de.sswis.model.CombinedStrategy: strategy
    }

    namespace java.lang {
        interface java.lang.Runnable {
            {abstract} +run(): void
        }
    }

@enduml
